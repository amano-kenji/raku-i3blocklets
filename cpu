#!/usr/bin/env raku
grammar cpuStat {
  token TOP {
    "cpu"
    <.ws> $<user>=\d+
    <.ws> $<nice>=\d+
    <.ws> $<system>=\d+
    <.ws> $<idle>=\d+
    <.ws> $<iowait>=\d+
    <.ws> $<irq>=\d+
    <.ws> $<softirq>=\d+
    <.ws> $<steal>=\d+
    <.ws> $<guest>=\d+
    <.ws> $<guest_nice>=\d+
    "\n"
  }
}

class CpuStatActions {
  method TOP($/) {
    my $used = $<user>.Int + $<nice>.Int + $<system>.Int + $<irq>.Int + $<softirq>.Int + $<steal>.Int
      + $<guest>.Int + $<guest_nice>.Int;
    my $total = $used + $<idle>.Int + $<iowait>.Int;
    make %{total => $total, used => $used};
  }
}

sub cpuTime() { cpuStat.subparse(slurp("/proc/stat"), actions => CpuStatActions).made }

sub MAIN(
  Str :$label=%*ENV<LABEL> || "CPU ", #= Label for cpu blocklet
  Int :$seconds=do if %*ENV<SECONDS> { Int(%*ENV<SECONDS>) } else { 1 }, #= seconds between refresh
) {
  my $cpuTime = cpuTime;
  while True {
    sleep $seconds;
    my $newCpuTime = cpuTime;
    my $cpuUsage = ($newCpuTime<used> - $cpuTime<used>) / ($newCpuTime<total> - $cpuTime<total>) * 100;
    $cpuTime = $newCpuTime;
    say $label, $cpuUsage.Int;
  }
}
